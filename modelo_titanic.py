# -*- coding: utf-8 -*-
"""modelo_titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ch82jr3EXpgROd9zjoyfsXQrwBzm2OST

Analise de Dados do Titanic

**Autoria**: Rayane Barbosa

Contato: rayane.c.barbosa@gmail.com

## Dados coletados em:

https://www.kaggle.com/rahulsah06/titanic

Importação de pacotes
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

"""##Leitura do banco de dados"""

dados = pd.read_csv('/content/train.csv')

#visualização das 5 primeiras linhas do dataset
dados.head()

#visualização das 5 útilmas linhas do dataset
dados.tail()

#limpando a base de dados com a função drop
dados = dados.drop(['Name','Ticket','Cabin','Embarked'], axis= 1)

dados.head()

"""##Editando Chave e Variável Resposta"""

dados = dados.set_index(['PassengerId'])
dados = dados.rename(columns={'Survived': 'target'}, inplace=False)

dados.head()

"""##Descritiva"""

dados.describe()

#Um dos tipos em pandas é "Object", como "sex" é uma coluna categórica a gente usa isso pra fazer a chamada 'O' 
dados.describe(include=['O'])

"""##Transformação dos dados"""

dados['Sex_F'] = np.where(dados['Sex'] == 'female', 1, 0)

dados['Pclass_1'] = np.where(dados['Pclass'] == 1, 1, 0)
dados['Pclass_2'] = np.where(dados['Pclass'] == 2, 1, 0)
dados['Pclass_3'] = np.where(dados['Pclass'] == 3, 1, 0)

dados = dados.drop(['Pclass','Sex'], axis=1)

dados.head()

dados.isnull().sum()

dados.fillna(0, inplace= True)

dados.isnull().sum()

"""##Amostragem"""

x_train, x_test, y_train, y_test = train_test_split(dados.drop(['target'], axis=1),
                                                      dados['target'],
                                                    test_size = 0.3,
                                                    random_state = 1234)

[{'treino': x_train.shape},
 {'teste': x_test.shape}]

"""##Modelo"""

rndforest = RandomForestClassifier(n_estimators= 1000,
                                   criterion='gini',
                                   max_depth = 5)

rndforest.fit(x_train, y_train)

probabilidade = rndforest.predict_proba(dados.drop('target', axis=1))[:,1]
classificacao = rndforest.predict(dados.drop('target', axis=1))

dados['probabilidade'] = probabilidade
dados['classificacao'] = classificacao

dados

